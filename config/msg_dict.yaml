# message_type:
#  matlab_struct_field_name 1: expression1
#  matlab_struct_field_name 2: expression2

geometry_msgs/TwistStamped:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 velocity_x: m.twist.linear.x
 velocity_y: m.twist.linear.y
 velocity_z: m.twist.linear.z
 angular_velocity_x: m.twist.angular.x
 angular_velocity_y: m.twist.angular.y
 angular_velocity_z: m.twist.angular.z

geometry_msgs/PoseStamped:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 position_x: m.pose.position.x
 position_y: m.pose.position.y
 position_z: m.pose.position.z
 orientation_quat_x: m.pose.orientation.x
 orientation_quat_y: m.pose.orientation.y
 orientation_quat_z: m.pose.orientation.z
 orientation_quat_w: m.pose.orientation.w

geometry_msgs/PoseWithCovarianceStamped:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 position_x: m.pose.pose.position.x
 position_y: m.pose.pose.position.y
 position_z: m.pose.pose.position.z
 orientation_quat_x: m.pose.pose.orientation.x
 orientation_quat_y: m.pose.pose.orientation.y
 orientation_quat_z: m.pose.pose.orientation.z
 orientation_quat_w: m.pose.pose.orientation.w
 #covariance: m.pose.covariance
 
geometry_msgs/Vector3Stamped: 
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 vector_x: m.vector.x
 vector_y: m.vector.y
 vector_z: m.vector.z

nav_msgs/Odometry: 
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 position_x: m.pose.pose.position.x
 position_y: m.pose.pose.position.y
 position_z: m.pose.pose.position.z
 orientation_quat_x: m.pose.pose.orientation.x
 orientation_quat_y: m.pose.pose.orientation.y
 orientation_quat_z: m.pose.pose.orientation.z
 orientation_quat_w: m.pose.pose.orientation.w
 velocity_x: m.twist.twist.linear.x
 velocity_y: m.twist.twist.linear.y
 velocity_z: m.twist.twist.linear.z
 angular_velocity_x: m.twist.twist.angular.x
 angular_velocity_y: m.twist.twist.angular.y
 angular_velocity_z: m.twist.twist.angular.z

sensor_msgs/BatteryState: 
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 voltage: m.voltage
 current: m.current
 charge: m.charge
 capacity: m.capacity
 design_capacity: m.design_capacity
 percentage: m.percentage

sensor_msgs/Imu: 
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 orientation_quat_x: m.orientation.x
 orientation_quat_y: m.orientation.y
 orientation_quat_z: m.orientation.z
 orientation_quat_w: m.orientation.w
 acceleration_x: m.linear_acceleration.x
 acceleration_y: m.linear_acceleration.y
 acceleration_z: m.linear_acceleration.z
 angular_velocity_x: m.angular_velocity.x
 angular_velocity_y: m.angular_velocity.y
 angular_velocity_z: m.angular_velocity.z

sensor_msgs/JointState:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec() 

sensor_msgs/Joy_UAS:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec() 
 cmd_velocity_x: m.axes[0]
 cmd_velocity_y: m.axes[1]
 cmd_velocity_z: m.axes[2]
 cmd_yaw_rate: m.axes[3]
 config_code: m.axes[4]

sensor_msgs/Joy_DJI_RC:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec() 
 cmd_roll: m.axes[0]
 cmd_pitch: m.axes[1]
 cmd_yaw_rate: m.axes[2]
 cmd_thrust:  m.axes[3]
 cmd_mode: m.axes[4]
 cmd_landing_gear: m.axes[5]

sensor_msgs/MagneticField: 
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 magnetic_field_x: m.magnetic_field.x
 magnetic_field_y: m.magnetic_field.y
 magnetic_field_z: m.magnetic_field.z

sensor_msgs/NavSatFix:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 latitude: m.latitude
 longitude: m.longitude
 altitude: m.altitude
 fix_status: m.status.status

sensor_msgs/Temperature:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 temperature: m.temperature
 variance: m.variance

sensor_msgs/FluidPressure:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 fluid_pressure: m.fluid_pressure

sensor_msgs/TimeReference:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 time_ref: m.time_ref.to_sec()

sensor_msgs/Range:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 range: m.range

sensor_msgs/Image:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()

std_msgs/Duration:
 bag_time: t.to_sec()
 duration: m.data.to_sec()

std_msgs/Float32:
 bag_time: t.to_sec()
 data: m.data

std_msgs/Float64:
 bag_time: t.to_sec()
 data: m.data

std_msgs/Float64MultiArray:
 bag_time: t.to_sec()

std_msgs/Int8:
 bag_time: t.to_sec()
 data: m.data

std_msgs/UInt8:
 bag_time: t.to_sec()
 data: m.data

std_msgs/String:
 bag_time: t.to_sec()
 data: m.data

tf2_msgs/TFMessage: 
 bag_time: t.to_sec()

##################
# Custom messages
##################
seabed_drivers/DvlMeasurements:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 altitude: m.altitude
 ranges_0: m.ranges[0]
 ranges_1: m.ranges[1]
 rnages_2: m.ranges[2]
 ranges_3: m.ranges[3]
 btv_x: m.btv.x
 btv_y: m.btv.y
 btv_z: m.btv.z
 btv_e: m.btv_e
 orientation_quat_x: m.orientation.x
 orientation_quat_y: m.orientation.y
 orientation_quat_z: m.orientation.z
 orientation_quat_w: m.orientation.w
 temperature: m.temperature
 salinity: m.salinity
 depth: m.depth
 soundvel: m.soundvel

seabed_drivers/ThrusterData: # t.to_sec(), m.prop_rpm, m.omega, m.voltage, m.current, m.temperature  
 bag_time: t.to_sec()
 msg_time: m.stamp.to_sec()
 prop_rpm: m.prop_rpm
 omega: m.omega
 voltage: m.voltage
 current: m.current
 temperature: m.temperature

# simplenav action msg

simplenav/NavigatorActionGoal:
 bag_time: t.to_sec()
 msg_time: m.header.stamp.to_sec()
 goal_x: m.goal.goalPose.pose.position.x
 goal_y: m.goal.goalPose.pose.position.y
 goal_z: m.goal.goalPose.pose.position.z
 goal_quat_x: m.goal.goalPose.pose.orientation.x
 goal_quat_y: m.goal.goalPose.pose.orientation.y
 goal_quat_z: m.goal.goalPose.pose.orientation.z
 goal_quat_w: m.goal.goalPose.pose.orientation.w
 start_point.x: m.goal.refStartPoint.x
 start_point.y: m.goal.refStartPoint.y
 start_point.z: m.goal.refStartPoint.z
 use_start_point: m.goal.useStartPoint
 active_hovering: m.goal.activeHovering

simplenav/NavigatorActionResult:
 bag_time: t.to_sec()
 msg_time: m.result.refPose.header.stamp.to_sec()
 reached_point_x: m.result.refPose.pose.position.x
 reached_point_y: m.result.refPose.pose.position.y
 reached_point_z: m.result.refPose.pose.position.z
 reached_point_quat_x: m.result.refPose.pose.orientation.x
 reached_point_quat_y: m.result.refPose.pose.orientation.y
 reached_point_quat_z: m.result.refPose.pose.orientation.z
 reached_point_quat_w: m.result.refPose.pose.orientation.w


quadrotor_msgs/Px4ctrlDebug:
  bag_time: t.to_sec()
  msg_time: m.header.stamp.to_sec()
  des_v_x: m.des_v_x
  des_v_y: m.des_v_y
  des_v_z: m.des_v_z
  fb_a_x: m.fb_a_x
  fb_a_y: m.fb_a_y
  fb_a_z: m.fb_a_z
  des_a_x: m.des_a_x
  des_a_y: m.des_a_y
  des_a_z: m.des_a_z
  des_q_x: m.des_q_x
  des_q_y: m.des_q_y
  des_q_z: m.des_q_z
  des_q_w: m.des_q_w
  des_thr: m.des_thr
  hover_percentage: m.hover_percentage
  thr_scale_compensate: m.thr_scale_compensate
  voltage: m.voltage
  err_axisang_x: m.err_axisang_x
  err_axisang_y: m.err_axisang_y
  err_axisang_z: m.err_axisang_z
  err_axisang_ang: m.err_axisang_ang
  fb_rate_x: m.fb_rate_x
  fb_rate_y: m.fb_rate_y
  fb_rate_z: m.fb_rate_z


mavros_msgs/AttitudeTarget:
  bag_time: t.to_sec()
  msg_time: m.header.stamp.to_sec()
  seq: m.header.seq
  frame_id: m.header.frame_id
  type_mask: m.type_mask
  orientation_quat_w: m.orientation.w
  orientation_quat_x: m.orientation.x
  orientation_quat_y: m.orientation.y
  orientation_quat_z: m.orientation.z
  body_rate_x: m.body_rate_x
  body_rate_y: m.body_rate_y
  body_rate_z: m.body_rate_z
  thrust: m.thrust
